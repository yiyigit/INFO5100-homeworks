
1.Explain the difference between final and finally in Java 8.
	final is a modifier that prohibits changes afterwards. When a variable is declared final, it cannot be changed after it’s initialized;
When a method is declared final, it cannot be overriden in the child class; When a class is declared final, it cannot be extended by another class.
	finally is a block to do an operation in the end despite of an exception or not.The block always executes when the try block exits.

2.Create a class called Number. Write a method called count() which can calculate quotient of two integers 
and use try...catch to deal with all possible exception.

public class Number {
    public void count(int a, int b) {
        try{
            int res = a / b;
            System.out.println(res);
        }
        catch(Exception e){
            System.out.println("not allowed");
        }
    }
}

3.Create one superclass called Employee and two subclasses – Contractor and FullTime. 
Both subclasses have common properties to share, like the name of the employee and the the amount of money the person will be 
paid per hour. There is one major difference between contractors and full-time employees – the time they work for the company. 
Full-time employees work constantly 8 hours per day and the working time of contractors may vary.

abstract class Employee{
    private String name;
    private int paymentPerHour;
    public Employee(String name, int paymentPerHour){
        public abstract int calsulate Salary();
        public String getName(){
            return name;
        };
        public void setName(String name){
            this.name = name;
        }
        public int getPaymentPerHour(){
            return paymentPerHour;
        }
        public void setPaymentPerHour(int paymentPerHour){
            this.paymentPerHour = paymentPerHour;
        }
    }
}

class FullTimeEmployee extends Employee{
    private int workingHour = 8;
    public FullTimeEmployee(String name, int paymentPerHour){
        return paymentPerHour* this.workingHours;
    }
}

class Contractor extends Employee{
    private int workingHours;
    public Contractor(String name, int paymentPerHour, int workingHours){
        public int calculateSalary(){
            return paymentPerHour* workingHours;
        }
    }
}

4.exception

class MyIndexOutOfBoundException extends Exception{
	int lowerBound, upperBound, index;
	
	MyIndexOutOfBoundException(int current, int lowest, int highest) {
		this.index = current;
    		this.lowerBound = lowest;
    		this.upperBound = highest;
  	}
	public String toString() {
    		return "Error Message: Index: " + index + ", but Lower bound: " 
		+ this.lowerBound + ", Upper Bound: "+ this.upperBound;
  	}
	
	public static void main(String[] args) {
    		int[] nums = new int[]{0,1,2,3,4,5,6,7,8,9};
		while (true) {
		    int i = 0;
		    try {
		    	System.out.println(nums[i++])
			if(i>=nums.length){
				throw new MyIndexOutOfBoundException(i, 0, nums.length-1);
			}
		    } 
		    catch (MyIndexOutOfBoundException e) {
			System.out.println(e);
		    }
		 }
	}
}

	

5.pets

public enum Sex{
    MALE("MALE"),
    FEMALE("FEMALE"),
    SPAYED("SPAYED"),
    NEUTERED("NEUTERED");

    private String name;

    Sex(String s){
        this.name = s;
    }

    public String getSex(){
        return this.name;
    }

}

public class Pet {
    private String name;
    private String ownerName;
    private String color;
    protected Sex sex;

    public Pet(String name, String ownerName, String color) {
        this.name = name;
        this.ownerName = ownerName;
        this.color = color;
    }

    public String getName() {
        return name;
    }

    public String getOwnerName() {
        return ownerName;
    }

    public String getColor() {
        return color;
    }

    void setSex(int sexid) {
        if (sexid == 1) {
            this.sex = Sex.MALE;
        } else if (sexid == 2) {
            this.sex = Sex.FEMALE;
        } else if (sexid == 3) {
            this.sex = Sex.SPAYED;
        } else if (sexid == 4) {
            this.sex = Sex.NEUTERED;
        } else {
            System.out.println("sex id should be in range of 1 to 4");
        }

    }

    String getSex() {
        return sex.getSex();
    }

    public String toString() {
        return getName() + "owned by " + getOwnerName() + "\n"+
                "Color: " + getColor() +"\n"+
                "Sex: " + getSex();
    }


    public static void main(String[] args) {
        Pet a = new Pet("Spot", "Mary", "Black and White");
        a.setSex(1);
        System.out.println(a.toString());


    }
}

public interface Boardable {
    void setBoardStart(int month, int day, int year);
    void setBoardEnd(int month, int day, int year);
    boolean boarding(int month, int day, int year);
}

public class Cat extends Pet implements Boardable{
    private String hairLength;
    private int start_month, start_day, start_year;
    private int end_month, end_day, end_year;

    String getHairLength(){
        return hairLength;
    };
    Cat (String name, String ownerName, String color, String hairLength){
        super(name, ownerName, color);
        this.hairLength = hairLength;
    }
    public String toString(){
        return  "CAT:" + "\n" +
                super.getName() + "owned by " + super.getOwnerName() + "\n"+
                "Color: " + super.getColor() +"\n"+
                "Sex: " + super.getSex();

    }

    public void setBoardStart(int month, int day, int year){
        if (month >= 1 && month <= 12){
            start_month = month;
        }
        if (day >= 1 && day <= 31) {
            start_day = day;
        }
        if (year >= 1000 && year <= 9999) {
            start_year = year;
        }

    }
    public void setBoardEnd(int month, int day, int year){
        if (month >= 1 && month <= 12){
            end_month = month;}
        if (day >= 1 && day <= 31) {
            end_day = day;}
        if (year >= 1000 && year < 10000) {
            end_year = year; }

    }
    public boolean boarding(int month, int day, int year){
        if(year > start_year && year < end_year){
            return true;
        }
        if(year == start_year && month > start_month || year == end_year && month < end_month){
                return true;
             }
        if(month == start_month && day >= start_day || month == end_month && day<= end_day){
                return true;
            }
        return false;
    }

    public static void main(String[] args) {
        Cat a = new Cat("Tom", "Bob", "Black", "short");
        a.setSex(3);
        System.out.println(a.toString());
        a.setBoardStart(1,1,2001);
        a.setBoardEnd(2,2,2002);
        System.out.println(a.boarding(1,28,2002));

    }

}


